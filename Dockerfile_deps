ARG CUDA_VERSION=9.0
ARG OS_VERSION=7
ARG NPROC=1
FROM nvidia/cuda:${CUDA_VERSION}-devel-centos${OS_VERSION}
LABEL maintainer="AliceVision Team alicevision-team@googlegroups.com"

# use CUDA_TAG to select the image version to use
# see https://hub.docker.com/r/nvidia/cuda/
#
# CUDA_TAG=8.0-devel
# docker build --build-arg CUDA_TAG=$CUDA_TAG --tag alicevision:$CUDA_TAG .
#
# then execute with nvidia docker (https://github.com/nvidia/nvidia-docker/wiki/Installation-(version-2.0))
# docker run -it --runtime=nvidia alicevision


# OS/Version (FILE): cat /etc/issue.net
# Cuda version (ENV): $CUDA_VERSION

ENV AV_DEPS_DEV=/opt/AliceVisionDeps_git \
    AV_DEPS_BUILD=/tmp/AliceVisionDeps_build \
    AV_INSTALL=/opt/AliceVision_install \
    AV_BUNDLE=/opt/AliceVision_bundle \
    PATH="${PATH}:${AV_BUNDLE}" \
    VERBOSE=1 \
    YUM_INSTALL='yum install -y --setopt=tsflags=nodocs'

#
# Install all compilation tools
# - file and openssl are needed for cmake
#
# Workaround to give access to deprecated devtoolset-6 is taken from ASWF container:
# https://github.com/AcademySoftwareFoundation/aswf-docker/blob/master/scripts/common/install_yumpackages.sh#L119
#
# Install packages one by one with yum to ensure that it creates an error if a package is missing.
#
RUN $YUM_INSTALL centos-release-scl-rh && \
    $YUM_INSTALL yum-utils && \
    sed -i 's/7/7.6.1810/g; s|^#\s*\(baseurl=http://\)mirror|\1vault|g; /mirrorlist/d' /etc/yum.repos.d/CentOS-SCLo-*.repo && \
    yum clean all && \
    $YUM_INSTALL devtoolset-6-toolchain --nogpgcheck && \
    $YUM_INSTALL --enablerepo=extras epel-release && \
    $YUM_INSTALL file && \
    $YUM_INSTALL git && \
    $YUM_INSTALL wget && \
    $YUM_INSTALL unzip && \
    $YUM_INSTALL yasm && \
    $YUM_INSTALL pkgconfig && \
    $YUM_INSTALL libtool && \
    $YUM_INSTALL nasm && \
    $YUM_INSTALL automake && \
    $YUM_INSTALL openssl-devel

# Okay, change our shell to specifically use our software collections.
# (default was SHELL [ "/bin/sh", "-c" ])
# https://docs.docker.com/engine/reference/builder/#shell
#
# See also `scl` man page for enabling multiple packages if desired:
# https://linux.die.net/man/1/scl
# SHELL [ "/usr/bin/scl", "enable", "devtoolset-6" ]
ENV PATH="/opt/rh/devtoolset-6/root/usr/bin:${PATH}" \
    LD_LIBRARY_PATH="/opt/rh/devtoolset-6/root/usr/lib:/opt/rh/devtoolset-6/root/usr/lib64:/opt/rh/devtoolset-6/root/usr/lib64/dyninst:${LD_LIBRARY_PATH}" \
    MAKE=/opt/rh/devtoolset-6/root/usr/bin/make

# Manually install cmake 3.16
WORKDIR /opt
RUN wget https://cmake.org/files/v3.16/cmake-3.16.3.tar.gz && tar zxvf cmake-3.16.3.tar.gz && cd cmake-3.16.3 && ./bootstrap --prefix=/usr/local  -- -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_USE_OPENSSL:BOOL=ON && make -j8 && make install

WORKDIR "${AV_BUNDLE}/share/aliceVision"
RUN wget https://gitlab.com/alicevision/trainedVocabularyTreeData/raw/master/vlfeat_K80L3.SIFT.tree

COPY . "${AV_DEPS_DEV}"

WORKDIR "${AV_DEPS_BUILD}"
# Build and clear build files in one line to reduce image size (avoid intermediate cache)
RUN \
\
cmake "${AV_DEPS_DEV}" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS:BOOL=ON -DALICEVISION_BUILD_DEPENDENCIES:BOOL=ON -DAV_DEPS_BUILD_ALICEVISION:BOOL=OFF -DCMAKE_INSTALL_PREFIX="${AV_INSTALL}" -DALICEVISION_BUNDLE_PREFIX="${AV_BUNDLE}" && \
\
make -j8 && \
\
make install && \
\
mv ${AV_INSTALL}/bin ${AV_INSTALL}/bin_deps && \
\
cd /opt && \
\
rm -rf "${AV_DEPS_BUILD}"

## To debug a specific library

# WORKDIR "${AV_DEPS_BUILD}"
# RUN make zlib
# RUN make geogram
# RUN make tbb
# RUN make eigen
# RUN make opengv
# RUN make lapack
# RUN make suitesparse
# RUN make ceres
# RUN make openexr
# RUN make tiff
# RUN make png
# RUN make turbojpeg
# RUN make libraw
# RUN make boost
# RUN make openimageio
# RUN make alembic
# RUN make popsift

